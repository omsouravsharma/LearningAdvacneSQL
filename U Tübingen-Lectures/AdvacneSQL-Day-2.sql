--SUBQUERY
-- EMPTY SUBQUERY TABLE RESULTS IN NULL 
-- MORE THAN ONE ROW IN SCALAR WILL RESULT IN RUNTIME ERROR
-- ROW VALUE
-- OFFET LIMIT
-- DISTINCT ON 

-- SELECT 2 + 
-- 	(SELECT T.D AS _
-- 	FROM T AS t
-- 	WHERE T.A = 2) AS "THE ANSWERT";
	
--TABLE T; 
-- EXPLAIN VERBOSE
-- SELECT T1.*
-- FROM T AS T1
-- WHERE T1.B = (SELECT T2.B
-- 			  FROM T AS T2
-- 			  WHERE T1.A =T2.A)

-- SELECT T.*
-- FROM T AS t
-- ORDER BY T.B DESC, T.C


-- VALUES (1, 'ONE'),
-- 		(2, 'TWO'),
-- 		(3, 'THREE')
-- ORDER BY COLUMN1 DESC

-- SELECT T1.*
-- FROM (
-- 	SELECT T2.*
-- 	FROM T AS T2
-- 	ORDER BY T2.A DESC
-- ) AS T1


-- SELECT T.* 
-- FROM T AS T
-- ORDER BY T.A DESC
-- OFFSET 1 
-- LIMIT 3

-- TABLE T 
-- ORDER BY T.C, T.D DESC
-- EXPLAIN VERBOSE


-- SELECT DISTINCT ON (T.C) T.*
-- FROM T AS T 
-- ORDER BY T.C, T.D

SELECT DISTINCT T.C 
FROM T


SELECT ALL T.C
FROM T







-- AGGREGATION 
-- AGGREGATION FUNCTION SEMANTICS
-- TRIPLE EMPTY, ZERO, MERGE

-- INITALIZED WITH ZERO VALUE

-- TABLE t

-- SELECT COUNT(*), MAX(T.D), COUNT(T.D), SUM(T.D), bool_and(T.C), BOOL_or(T.D = 30)
-- FROM T
-- WHERE FALSE

-- ORDERED AGGREGATION 

-- SELECT STRING_AGG(T.a::TEXT, ',' ORDER BY T.A DESC) AS "aLL a"
-- FROM T AS T

-- FILTERED AND UNIQUE AGGREGATES
-- WHERE OR DISTINCT CAN BE INCLUDED IN AGGREGATED FUNCTION

-- SELECT SUM(T.D)FILTER( WHERE T.C ) "TRUE VALUE", SUM(T.D) "ALL VALUES"
-- FROM T AS T

-- SELECT SUM(T.D), 
-- 	SUM(
-- 		CASE 
-- 			WHEN T.C THEN T.D
-- 			ELSE 0
-- 		END)
-- FROM T AS T


-- SELECT 
-- SUM(T.D)FILTER (WHERE T.B = 'x') AS "X VALUES", 
-- SUM(T.D)FILTER (WHERE T.B ='y') AS "Y VALUES",
-- SUM(T.D)FILTER (WHERE T.B NOT IN ('x','y')) AS "NOT X AND Y"

-- FROM T AS T


-- UNIQUE AGGREGATE

-- SELECT COUNT(DISTINCT T.C), 
-- COUNT(T.C)
-- FROM T AS T


-- FORMING GROUPING OF ROWS 
-- FROM ROW BY ROW
-- GROUP BY GROUP BY GROUP 
--  5. SELECT 
--  1. FROM
--  2. WHERE 
--  3. GROUP BY 
--  4. HAVING 

-- SELECT (T.B) AS B, COUNT(*), SUM(T.D), BOOL_AND(T.A %2 = 0),STRING_AGG(T.A::TEXT, ',')
-- FROM T 
-- GROUP BY T.B
-- HAVING COUNT(*) > 2

-- SELECT T.A %2, COUNT(*)
-- FROM T AS T 
-- GROUP BY T.A %2 



-- SELECT T.B AS "GROUP", 
-- 		T.A%2 AS "ODD?"
-- FROM T AS T
-- GROUP BY T.B, T.A %2





















		